---

- name: Clone repo for each service if defined
  git:
    repo: '{{ item.repo }}'
    dest: '{{ workspace_dir }}/{{ item.name }}'
    accept_hostkey: yes
  with_items: '{{ services }}'
  when: '{{ item.repo is defined }}'

- name: Create service directories for services which don't have repos
  vars:
    service: '{{ item }}'
  file:
    path: '{{ workspace_dir }}/{{ item.name }}'
    state: directory
    mode: 0755
  with_items: '{{ services }}'
  when: '{{ item.repo is not defined }}'

- name: Create Vagrantfile for each service
  vars:
    service: '{{ item }}'
  template:
    src: 'Vagrantfile.j2'
    dest: '{{ workspace_dir }}/{{ service.name }}/Vagrantfile'
  with_items: '{{ services }}'
  when: service.type == 'vagrant'

- name: Create Dockerfile for each service
  vars:
    service: '{{ item }}'
  template:
    src: 'Dockerfile.j2'
    dest: '{{ workspace_dir }}/{{ service.name }}/Dockerfile'
  with_items: '{{ services }}'
  when: service.type == 'docker'

- name: Create docker_run.sh script for running docker containers
  vars:
    service: '{{ item }}'
  template:
    src: 'docker_run.sh.j2'
    dest: '{{ workspace_dir }}/{{ service.name }}/docker_run.sh'
    mode: 0755
  with_items: '{{ services }}'
  when: service.type == 'docker'

# - name: Copy ansible.cfg for each service
#   vars:
#     service: '{{ item }}'
#   template:
#     src: 'ansible.cfg.j2'
#     dest: '{{ workspace_dir }}/{{ item.name }}/ansible.cfg'
#   with_items: '{{ services }}'

- name: Get hostname output
  shell: hostname
  register: hostname_output

- name: Add as Fact per for each hosts
  set_fact:
      hostname: "{{ hostname_output.stdout }}"

- name: Create hosts file locally
  become: yes
  template:
    src: 'etc/hosts.j2'
    dest: '/etc/hosts'
    backup: yes
  delegate_to: localhost

- name: Add local service hosts to know_hosts
  vars:
    service: '{{ item }}'
  command: ssh-keygen -f "~/.ssh/known_hosts" -R {{ service.url }}
  with_items: '{{ services }}'

- name: Create inventory file
  become: yes
  template:
    src: 'inventory.j2'
    dest: '{{ base_dir }}/envs/local/inventory'
  delegate_to: localhost

# - name: Create ansible.cfg
#   become: yes
#   template:
#     src: 'ansible.cfg.j2'
#     dest: '{{ base_dir }}/envs/local/ansible.cfg'

- name: Check if docker network is present
  command: docker network ls --filter name={{ docker.network_name }} -q
  register: docker_network_check

- name: Create a network with options
  command: docker network create --subnet={{ docker.network_subnet }} {{ docker.network_name }}
  when: docker_network_check.stdout == ""
