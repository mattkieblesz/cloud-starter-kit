- transform cloud-starter-kit to `cloud` program
    - commands/
    - lib/ under which put all commands which will use different tools like provisioners as classes
    - scripts/
    - repo/
        - commands/
            install.py (installs `cloud` program first and then calls its install command)
            deploy.py (calling provision command)
            backup.py (calling provision command)
        - envs/
            - dev/
                - secrets/
                    vault-pass
                    ovh-config
                inventory
                terraform.tf
            - stg/
                - secrets/
                    vault-pass
                    ovh-config
                vars.yml
                secrets.yml
                inventory
                terraform.tf
            - prd/
                - secrets/
                    vault-pass
                    aws-config
                    credentials.json
                    aws_privkey.pem
                    aws_pubkey.pem
                inventory
                terraform.tf
            - prf/
                - secrets/
                    vault-pass
                    aws-config
                    credentials.json
                    aws_privkey.pem
                    aws_pubkey.pem
                inventory
                terraform.tf
            - mgt/
                - secrets/
                    vault-pass
                    ovh-config
                inventory
                cloudformation.json
            - lcl/ (it is in ansible/local/roles/local/dev_setup)
                inventory
        - ansible/
            - files/
            - roles/
                - services/
                - common/ (common roles used by services)
                - local/ (roles executed only on local computer)
                - vendor/
            - plays/ (service plays)
            - vars/ (global vars)
            ansible.cfg
        - puppet/
        - chef/
        - saltstack/
        - manage.py
    - .kitchen.yml (for vagrant testing)
    - setup.py
- create abstract classes in lib/:
    - provisioner (ansible/puppet/chef/saltstack)
    - infrastructure manager (terraform/cloudformation/local)
    - vm manager (vagrant/docker)
    - infrastructure provider (aws/ovh/azure/local)
    - environment
    - local config file (with secret)
    - service (with git)
    - store (remote or local by using infra provider)
    - cloud store
    - environment store
    - image builder (packer/local-aws-builder)
- commands in `cloud` program
    - cloud init (creates config in current directory for cloud from template)
    - cloud start --config=<config-path but optional> (creates initial repo)
- commands available in cloud repo
    - install (install deps - provisioner/infra manager/infra provider/)
        - prompt for all configs and automatically configure
        - update all vendor dependencies like roles
    - infra (--environment)
        - create (starts automatically)
        - destroy
        - start
        - stop
    - provision (--tag, --service, --environment)
    - build (--service, --build-type, --push-local, --push-remote)
    - test (--service, --type=<integration|unit|acceptance|behavioural>)
- commands available in workspace/<service-name> dir
    - same as with cloud repo, but with --service flag already filled



























- functionalities:
    - haproxy (mkitdevelopment.com is point to micro aws instance with haproxy in it)
    - tinder with scraped products using celery workers and rabitmq with websockets and jquery and react native view for android and iOS (scraping job log on displayed on the page)
    - self hosted osm with leaflet
    - python social auth (facebook/twitter/google)
    - change color of navigation bar (using semantic-ui and recompiling with django forms)
    - machine learning benchmark (linear regression)
    - payments with paymill pro/sth similar
    - using elasticsearch/sorl search with react
    - login page with angular2
    - real time feed + notifications react app
    - performance test by clicking a button (setup simple infra and with small instance run script)
    - godbox
    - fake https
    - create server on demand and destroy 5 minutes after creation (with timer)
- coding exercises:
    - CodeCata:
        - 1
        - 2
        - ..
- languages (hello world):
    - python
    - ruby
    - scala
    - go
    - clojure
    - nodejs
    - PL-SQL
    - Erlang
    - haskel
    - Perl
    - php
    - java
    - c
    - c++
    - c#
    - lua
    - bash
    - assembley
    - matlab
    - Visual Basic .NET
    - pascal
    - Rust
    - CSS
    - Sass
    - less
    - javascript
    - XML
    - JSON
- software (default usecase):
    - supervisor
    - hadoop
    - HBase
    - spark
    - hive
    - cassandra
    - docker
    - postgresql
    - postgis
    - mysql
    - redis
    - memcache
    - mongo
    - jenkins
    - gocd
    - elk
    - sentry
    - elasticsearch
    - solr
    - openstack
    - RabbitMQ
    - Kubernetes
    - Kafka
    - Oozie
    - ZooKeeper
    - Tomcat
    - nginx
    - gunicorn
    - uwsgi
    - vagrant
    - Datadog
    - WordPress
    - apache2
    - Neo4j
    - graphana
    - vmware
    - haproxy
    - kitchenci
    - postfix
    - gitlab enterprise
- provisioners:
    - ansible
    - puppet
    - chef
    - Saltstack
- testing (test log with websockets):
    - integration
    - acceptance (payments)
    - unittests (pytest and unittest)
- libs (simplest hello world app):
    - flask
    - django
    - rubyonrails
    - cherrypy
    - react
    - angular2
    - fabric
    - boto
    - numpy/scipy/pandas
    - Jupyter
    - Kerberos
    - LDAP
    - pySpark
    - semantic-ui
    - celery
    - Bootstrap
    - react-native
- providers:
    - aws (ec2)
    - ovh (scaleway)
    - azure
